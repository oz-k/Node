<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        video {
            border: 1px solid black;
            width:500px;
            height:500px;
        }
    </style>
</head>
<body>
    <video id="local" src="" autoplay muted></video>
    <video id="remote" src="" autoplay></video>
    <div id="deviceList" style="display: flex;"></div>
    
    <script src="https://code.jquery.com/jquery-1.10.2.js"></script> <!--jquery-->
    <script src="/socket.io/socket.io.js"></script> <!--socket-->
    <script>
        const namespace = io('/rtc');
        var localVideo = document.getElementById('local');
        var remoteVideo = document.getElementById('remote');
        const iceServer = {'iceServers':[{'url':'stun:stun.l.google.com:19302'}]};
        var peerConnection = new RTCPeerConnection(iceServer);
        var localStream;
        
        namespace.on('signaling', function(msg) {
            if(msg.type === 'sendOffer') { //요청 보내기
                peerConnection.createOffer(function(sdp) { //연결 요청
                    namespace.emit('sendSignal', {'type':'sendOffer', 'sdp':sdp});
                    peerConnection.setLocalDescription(sdp); //내 sdp 설정
                });
            } else if(msg.type === 'sendAnswer') { //응답 보내기
                peerConnection.setRemoteDescription(new RTCSessionDescription(sdp)); //상대 sdp 세팅
                peerConnection.createAnswer(function(sdp) {
                    namespace.emit('sendSignal', {'type':'sendAnswer', 'sdp':sdp});
                    peerConnection.setLocalDescription(sdp); //내 sdp 설정
                });
            } else if(msg.type === 'bringAnswer') { //응답 받기
                peerConnection.setRemoteDescription(new RTCSessionDescription(msg.sdp)); //상대 sdp 세팅
            }
            console.log(msg.type, msg.sdp);
        });

        navigator.mediaDevices.ondevicechange = findDevice;
        function findDevice() {
            navigator.mediaDevices.enumerateDevices().then(function(deviceInfos) {
                var device = {
                    'audio':false,
                    'video':false
                };
                var audios = [];
                var videos = [];

                //비디오, 오디오 분류
                deviceInfos.forEach(function(deviceInfo) {
                    if(deviceInfo.kind === 'audioinput') audios.push(deviceInfo.label);
                    if(deviceInfo.kind === 'videoinput') videos.push(deviceInfo.label);
                });

                appendDevice(audios, 'audioinput');
                appendDevice(videos, 'videoinput');

                //사용가능한 디바이스 체크
                if(audios.length != 0) device['audio'] = true;
                if(videos.length != 0) device['video'] = true;

                if(device['audio']||device['video']) {
                    navigator.mediaDevices.getUserMedia(device).then(function(stream) {
                        localStream = stream;
                        localVideo.srcObject = stream;
                    }).catch(function(err) {console.log(err)});
                }
            })
        };
        findDevice();
        
        //디바이스 리스트 추가
        function appendDevice(devices, type) {
            if(document.querySelector(`#${type} p`)) {
                document.getElementById('deviceList').removeChild(document.getElementById(type));
            }
            var div = document.createElement('div');
            div.setAttribute('id', type);
            for(i in devices) {
                var p = document.createElement('p');
                p.innerText = devices[i];
                div.appendChild(p);
            }
            document.getElementById('deviceList').appendChild(div);
        }
    </script>
</body>
</html>